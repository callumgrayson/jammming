{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","search","bind","assertThisInitialized","handleTermChange","selectAll","event","setState","target","value","document","getElementsByClassName","select","e","preventDefault","onSearch","react_default","a","createElement","className","onSubmit","placeholder","onChange","onFocus","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","href","name","artist","album","renderAction","TrackList","tracks","map","components_Track_Track","key","id","SearchResults","components_TrackList_TrackList","searchResults","Playlist","handleNameChange","onNameChange","pName","playlistTracks","onSave","Spotify","getAccessToken","wlhref","window","location","tempTokenMatch","match","tempExpireMatch","expiresIn","Number","console","log","setTimeout","history","pushState","authorizeUrl","concat","fetch","headers","Authorization","then","response","json","jsonResponse","tempTracks","items","item","artists","uri","savePlaylist","playlistName","trackURIs","length","userId","method","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","ptrack","includes","push","filter","_this2","alert","components_SearchBar_SearchBar","components_SearchResults_SearchResults","components_Playlist_Playlist","Boolean","hostname","ReactDOM","render","components_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5181838.chunk.js","sourcesContent":["const clientId = '5360cac3dbb6475b8708940ae5f2f080';\r\nconst redirectUri = 'https://callumgrayson.github.io/jammming/';\r\n\r\nlet accessToken;\r\n\r\n// Functional component for interactions with API\r\nconst Spotify = {\r\n  getAccessToken() {\r\n\r\n    // If already a token return it\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    // Get token and expiry from URL if present\r\n    let wlhref = window.location.href;\r\n    let tempTokenMatch = wlhref.match(/access_token=([^&]*)/);\r\n    let tempExpireMatch = wlhref.match(/expires_in=([^&]*)/);\r\n    if (tempTokenMatch && tempExpireMatch) {\r\n\r\n      // Assign values from URL\r\n      accessToken = tempTokenMatch[1];\r\n      const expiresIn = Number(tempExpireMatch[1]);\r\n      console.log(expiresIn);\r\n\r\n      // Set timeout and clear history\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/');\r\n\r\n      return accessToken;\r\n\r\n    } else {\r\n\r\n      // Send to Spotify to authorize\r\n      const authorizeUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = authorizeUrl;\r\n      console.log(authorizeUrl);\r\n    }\r\n  },\r\n\r\n  // Search returns a promise with data in object\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n\r\n    // Send request to Spotify endpoint\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n\r\n    // json the response\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n\r\n      // If there is no data return an empty array\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n\r\n      // If there is data iterate to get required fields\r\n      let tempTracks = jsonResponse.tracks.items.map(item => ({\r\n        id: item.id,\r\n        name: item.name,\r\n        artist: item.artists[0].name,\r\n        album: item.album.name,\r\n        uri: item.uri\r\n      }));\r\n      console.log(tempTracks);\r\n      return tempTracks;\r\n    });\r\n  },\r\n\r\n  savePlaylist(playlistName, trackURIs) {\r\n    // If there is no name or no uris stop\r\n    if (!playlistName || !trackURIs.length) {\r\n      return;\r\n    }\r\n\r\n    // Get relevant data for injections\r\n    const accessToken = Spotify.getAccessToken();\r\n    let userId;\r\n    const headers = {Authorization: `Bearer ${accessToken}` };\r\n\r\n    // Send request to Spotify\r\n    return fetch(`https://api.spotify.com/v1/me`, {\r\n        headers: headers\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n\r\n      // Data for injection\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        method: 'POST',\r\n        headers: headers,\r\n        body: JSON.stringify({name: playlistName})\r\n\r\n      // Response to json\r\n      }).then(response => {\r\n        return response.json();\r\n      }).then(jsonResponse => {\r\n\r\n        // Data for injection\r\n        const playlistID = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, {\r\n          method: 'POST',\r\n          headers: headers,\r\n          body: JSON.stringify({uris: trackURIs})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport default Spotify;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term: ''\r\n    };\r\n\r\n    this.search = this.search.bind(this);\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.selectAll = this.selectAll.bind(this);\r\n  }\r\n\r\n  handleTermChange(event) {\r\n    this.setState({term: event.target.value});\r\n  }\r\n\r\n  selectAll() {\r\n    let input = document.getElementsByClassName('input')[0];\r\n    input.select();\r\n  }\r\n\r\n  search(e) {\r\n    e.preventDefault();\r\n    this.state.term && this.props.onSearch(this.state.term);\r\n    this.selectAll();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div className=\"SearchBar\">\r\n      <form className=\"SearchBar\" onSubmit={this.search}>\r\n        <input className=\"input\" \r\n               placeholder=\"Enter A Song, Album, or Artist\"\r\n               onChange={this.handleTermChange}\r\n               onFocus={this.selectAll}\r\n        />\r\n        <button onClick={this.search} >SEARCH</button>      \r\n      </form>\r\n      // </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n  }\r\n\r\n  addTrack(event) {\r\n    this.props.onAdd(this.props.track);\r\n  }\r\n\r\n  removeTrack(event) {\r\n    this.props.onRemove(this.props.track);\r\n  }\r\n\r\n  renderAction() {\r\n    if (this.props.isRemoval) {\r\n      return (<button className=\"Track-action\" onClick={this.removeTrack}>-</button>)\r\n    }\r\n    return (<button className=\"Track-action\" onClick={this.addTrack} href=\"#\">+</button>)\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Track\">\r\n        <div className=\"Track-information\">\r\n          <h3>{this.props.track.name}</h3>\r\n          <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n        </div>\r\n        {this.renderAction()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Track;\r\n","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"TrackList\">\r\n          {\r\n            this.props.tracks.map(track => {\r\n              return <Track track={track}\r\n                            key={track.id}\r\n                            onAdd={this.props.onAdd}\r\n                            isRemoval={this.props.isRemoval}\r\n                            onRemove={this.props.onRemove} />\r\n            })\r\n          }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TrackList;\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchResults\">\r\n        <h2>Results</h2>\r\n        <TrackList tracks={this.props.searchResults}\r\n                   onAdd={this.props.onAdd} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchResults;\r\n","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n  }\r\n\r\n  handleNameChange(e) {\r\n    e.preventDefault();\r\n    this.props.onNameChange(e.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Playlist\">\r\n        <input placeholder={'New Playlist'}\r\n               onChange={this.handleNameChange}\r\n               value={this.props.pName} />\r\n        <TrackList tracks={this.props.playlistTracks}\r\n                   isRemoval={true}\r\n                   onRemove={this.props.onRemove} />\r\n        <button className=\"Playlist-save\"\r\n           onClick={this.props.onSave} >SAVE TO SPOTIFY</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Playlist;\r\n","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchResults: [],\n      playlistName: '',\n      playlistTracks: []\n    };\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.search = this.search.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n  }\n\n  addTrack(track) {\n    let ids = this.state.playlistTracks.map(ptrack => {\n      return ptrack.id;\n    })\n    if (!ids.includes(track.id)) {\n      let tracks = this.state.playlistTracks;\n      tracks.push(track);\n      this.setState({playlistTracks: tracks});\n    } else {\n      return false;\n    }\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(item => {\n      return item.id !== track.id;\n    });\n    this.setState({playlistTracks: tracks});\n  }\n\n  async search(term) {\n    let searchResults = await Spotify.search(term);\n    this.setState({searchResults: searchResults});\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    const pName = this.state.playlistName;\n    if (pName && trackURIs.length) {\n      Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n        this.setState({\n          playlistName: '',\n          playlistTracks: []\n        });\n      });\n    } else {      \n      alert('You must provide a playlist name and some tracks!');\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack} />\n            <Playlist playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} \n                      pName={this.state.playlistName}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}